// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/user_location_model.dart';
import 'core/models/weather_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6288021804736067416),
      name: 'UserLocationModel',
      lastPropertyId: const obx_int.IdUid(2, 5676308571672906706),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6257010865388122240),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5676308571672906706),
            name: 'city',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2452973746294805099),
      name: 'DailyWeatherModel',
      lastPropertyId: const obx_int.IdUid(9, 5938616957233397448),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1293477428237526697),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4933557903304263224),
            name: 'date',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1286461287314963918),
            name: 'minTemperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9200915160373252925),
            name: 'maxTemperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 957990163063378207),
            name: 'dayTemperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6756635116227490504),
            name: 'nightTemperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 46966981681422884),
            name: 'eveningTemperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2034363477451399101),
            name: 'morningTemperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5938616957233397448),
            name: 'weatherId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 1872868495458102860),
            relationTarget: 'WeatherModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8981142674719315566),
      name: 'WeatherModel',
      lastPropertyId: const obx_int.IdUid(11, 9082153850139394367),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8624271116058523298),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5983159573487143787),
            name: 'temperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4988473289008592240),
            name: 'pressure',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8151442913308565981),
            name: 'pressureUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3516165809266029767),
            name: 'humidity',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6526001850813182779),
            name: 'humidityUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7932531917148480823),
            name: 'uvIndex',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3122497610053376219),
            name: 'windSpeed',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 232746743219721653),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3731586096053346804),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 9082153850139394367),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'daily', srcEntity: 'DailyWeatherModel', srcField: '')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 8981142674719315566),
      lastIndexId: const obx_int.IdUid(1, 1872868495458102860),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    UserLocationModel: obx_int.EntityDefinition<UserLocationModel>(
        model: _entities[0],
        toOneRelations: (UserLocationModel object) => [],
        toManyRelations: (UserLocationModel object) => {},
        getId: (UserLocationModel object) => object.id,
        setId: (UserLocationModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserLocationModel object, fb.Builder fbb) {
          final cityOffset = fbb.writeString(object.city);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, cityOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = UserLocationModel(id: idParam, city: cityParam);

          return object;
        }),
    DailyWeatherModel: obx_int.EntityDefinition<DailyWeatherModel>(
        model: _entities[1],
        toOneRelations: (DailyWeatherModel object) => [object.weather],
        toManyRelations: (DailyWeatherModel object) => {},
        getId: (DailyWeatherModel object) => object.id,
        setId: (DailyWeatherModel object, int id) {
          object.id = id;
        },
        objectToFB: (DailyWeatherModel object, fb.Builder fbb) {
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dateOffset);
          fbb.addFloat64(2, object.minTemperature);
          fbb.addFloat64(3, object.maxTemperature);
          fbb.addFloat64(4, object.dayTemperature);
          fbb.addFloat64(5, object.nightTemperature);
          fbb.addFloat64(6, object.eveningTemperature);
          fbb.addFloat64(7, object.morningTemperature);
          fbb.addInt64(8, object.weather.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final minTemperatureParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final maxTemperatureParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final dayTemperatureParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final nightTemperatureParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final eveningTemperatureParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final morningTemperatureParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = DailyWeatherModel(
              id: idParam,
              date: dateParam,
              minTemperature: minTemperatureParam,
              maxTemperature: maxTemperatureParam,
              dayTemperature: dayTemperatureParam,
              nightTemperature: nightTemperatureParam,
              eveningTemperature: eveningTemperatureParam,
              morningTemperature: morningTemperatureParam);
          object.weather.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.weather.attach(store);
          return object;
        }),
    WeatherModel: obx_int.EntityDefinition<WeatherModel>(
        model: _entities[2],
        toOneRelations: (WeatherModel object) => [],
        toManyRelations: (WeatherModel object) => {
              obx_int.RelInfo<DailyWeatherModel>.toOneBacklink(9, object.id,
                      (DailyWeatherModel srcObject) => srcObject.weather):
                  object.daily
            },
        getId: (WeatherModel object) => object.id,
        setId: (WeatherModel object, int id) {
          object.id = id;
        },
        objectToFB: (WeatherModel object, fb.Builder fbb) {
          final pressureUnitOffset = object.pressureUnit == null
              ? null
              : fbb.writeString(object.pressureUnit!);
          final humidityUnitOffset = object.humidityUnit == null
              ? null
              : fbb.writeString(object.humidityUnit!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.temperature);
          fbb.addFloat64(2, object.pressure);
          fbb.addOffset(3, pressureUnitOffset);
          fbb.addFloat64(4, object.humidity);
          fbb.addOffset(5, humidityUnitOffset);
          fbb.addFloat64(6, object.uvIndex);
          fbb.addFloat64(7, object.windSpeed);
          fbb.addOffset(8, cityOffset);
          fbb.addInt64(9, object.lastUpdated?.millisecondsSinceEpoch);
          fbb.addOffset(10, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastUpdatedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final temperatureParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final pressureParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final pressureUnitParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final humidityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final humidityUnitParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final uvIndexParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 16);
          final windSpeedParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 18);
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final lastUpdatedParam = lastUpdatedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastUpdatedValue);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final object = WeatherModel(
              id: idParam,
              temperature: temperatureParam,
              pressure: pressureParam,
              pressureUnit: pressureUnitParam,
              humidity: humidityParam,
              humidityUnit: humidityUnitParam,
              uvIndex: uvIndexParam,
              windSpeed: windSpeedParam,
              city: cityParam,
              lastUpdated: lastUpdatedParam,
              description: descriptionParam);
          obx_int.InternalToManyAccess.setRelInfo<WeatherModel>(
              object.daily,
              store,
              obx_int.RelInfo<DailyWeatherModel>.toOneBacklink(9, object.id,
                  (DailyWeatherModel srcObject) => srcObject.weather));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [UserLocationModel] entity fields to define ObjectBox queries.
class UserLocationModel_ {
  /// See [UserLocationModel.id].
  static final id =
      obx.QueryIntegerProperty<UserLocationModel>(_entities[0].properties[0]);

  /// See [UserLocationModel.city].
  static final city =
      obx.QueryStringProperty<UserLocationModel>(_entities[0].properties[1]);
}

/// [DailyWeatherModel] entity fields to define ObjectBox queries.
class DailyWeatherModel_ {
  /// See [DailyWeatherModel.id].
  static final id =
      obx.QueryIntegerProperty<DailyWeatherModel>(_entities[1].properties[0]);

  /// See [DailyWeatherModel.date].
  static final date =
      obx.QueryStringProperty<DailyWeatherModel>(_entities[1].properties[1]);

  /// See [DailyWeatherModel.minTemperature].
  static final minTemperature =
      obx.QueryDoubleProperty<DailyWeatherModel>(_entities[1].properties[2]);

  /// See [DailyWeatherModel.maxTemperature].
  static final maxTemperature =
      obx.QueryDoubleProperty<DailyWeatherModel>(_entities[1].properties[3]);

  /// See [DailyWeatherModel.dayTemperature].
  static final dayTemperature =
      obx.QueryDoubleProperty<DailyWeatherModel>(_entities[1].properties[4]);

  /// See [DailyWeatherModel.nightTemperature].
  static final nightTemperature =
      obx.QueryDoubleProperty<DailyWeatherModel>(_entities[1].properties[5]);

  /// See [DailyWeatherModel.eveningTemperature].
  static final eveningTemperature =
      obx.QueryDoubleProperty<DailyWeatherModel>(_entities[1].properties[6]);

  /// See [DailyWeatherModel.morningTemperature].
  static final morningTemperature =
      obx.QueryDoubleProperty<DailyWeatherModel>(_entities[1].properties[7]);

  /// See [DailyWeatherModel.weather].
  static final weather =
      obx.QueryRelationToOne<DailyWeatherModel, WeatherModel>(
          _entities[1].properties[8]);
}

/// [WeatherModel] entity fields to define ObjectBox queries.
class WeatherModel_ {
  /// See [WeatherModel.id].
  static final id =
      obx.QueryIntegerProperty<WeatherModel>(_entities[2].properties[0]);

  /// See [WeatherModel.temperature].
  static final temperature =
      obx.QueryDoubleProperty<WeatherModel>(_entities[2].properties[1]);

  /// See [WeatherModel.pressure].
  static final pressure =
      obx.QueryDoubleProperty<WeatherModel>(_entities[2].properties[2]);

  /// See [WeatherModel.pressureUnit].
  static final pressureUnit =
      obx.QueryStringProperty<WeatherModel>(_entities[2].properties[3]);

  /// See [WeatherModel.humidity].
  static final humidity =
      obx.QueryDoubleProperty<WeatherModel>(_entities[2].properties[4]);

  /// See [WeatherModel.humidityUnit].
  static final humidityUnit =
      obx.QueryStringProperty<WeatherModel>(_entities[2].properties[5]);

  /// See [WeatherModel.uvIndex].
  static final uvIndex =
      obx.QueryDoubleProperty<WeatherModel>(_entities[2].properties[6]);

  /// See [WeatherModel.windSpeed].
  static final windSpeed =
      obx.QueryDoubleProperty<WeatherModel>(_entities[2].properties[7]);

  /// See [WeatherModel.city].
  static final city =
      obx.QueryStringProperty<WeatherModel>(_entities[2].properties[8]);

  /// See [WeatherModel.lastUpdated].
  static final lastUpdated =
      obx.QueryDateProperty<WeatherModel>(_entities[2].properties[9]);

  /// See [WeatherModel.description].
  static final description =
      obx.QueryStringProperty<WeatherModel>(_entities[2].properties[10]);

  /// see [WeatherModel.daily]
  static final daily = obx.QueryBacklinkToMany<DailyWeatherModel, WeatherModel>(
      DailyWeatherModel_.weather);
}
